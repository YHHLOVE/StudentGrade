/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-07-19 06:54:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class digit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>黑客帝国效果</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <canvas id=\"canvas\"></canvas>\r\n");
      out.write("    <style type=\"text/css\">\r\n");
      out.write("    body{margin: 0; padding: 0; overflow: hidden;}\r\n");
      out.write("    </style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var canvas = document.getElementById('canvas');\r\n");
      out.write("        var ctx = canvas.getContext('2d');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        canvas.height = window.innerHeight;\r\n");
      out.write("        canvas.width = window.innerWidth;\r\n");
      out.write("\r\n");
      out.write("        var texts = '0123456789'.split('');\r\n");
      out.write("\r\n");
      out.write("        var fontSize = 16;\r\n");
      out.write("        var columns = canvas.width/fontSize;\r\n");
      out.write("        // 用于计算输出文字时坐标，所以长度即为列数\r\n");
      out.write("        var drops = [];\r\n");
      out.write("        //初始值\r\n");
      out.write("        for(var x = 0; x < columns; x++){\r\n");
      out.write("            drops[x] = 1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function draw(){\r\n");
      out.write("            //让背景逐渐由透明到不透明\r\n");
      out.write("            ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n");
      out.write("            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n");
      out.write("            //文字颜色\r\n");
      out.write("            ctx.fillStyle = '#0F0';\r\n");
      out.write("            ctx.font = fontSize + 'px arial';\r\n");
      out.write("            //逐行输出文字\r\n");
      out.write("            for(var i = 0; i < drops.length; i++){\r\n");
      out.write("                var text = texts[Math.floor(Math.random()*texts.length)];\r\n");
      out.write("                ctx.fillText(text, i*fontSize, drops[i]*fontSize);\r\n");
      out.write("\r\n");
      out.write("                if(drops[i]*fontSize > canvas.height || Math.random() > 0.95){\r\n");
      out.write("                    drops[i] = 0;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                drops[i]++;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        setInterval(draw, 33);\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
